--Lattice paths

traverse :: Int -> Int
traverse n =
    (turn 1 0) + (turn 0 1)
    where
        turn x y
            | x == n && y == n = 1
            | x == n = turn x (y + 1)
            | y == n = turn (x + 1) y
            | otherwise = (turn (x + 1) y) + (turn x (y + 1))

{-
  N grid

   0   A       N
   * - * - * - *
   | / | / |   |
 B * - * - * - *
   | / |   |   |
   * - * - * - *
   |   |   |   |
   * - * - * - * (NxN)

  Из точки (0, 0) мы можем пойти 2мя способами: в A и B

  Скажем в общем: из любой точки за исключением 1 можно прoйти 2мя способами
  Эти способы назовем потомками

  Исключение 1:
  У точек последней строки и последней колонки есть только 1 потомок

  Построим дерево возможных переходов:
              (0,0)
              /    \
           (0,1)  (1,0)  (малая диагональ от А до B, 1 уровень)
           /   \  /    \  - ветки
        (0,2)  (1,1)   (2,0) (следующая малая диагональ, 2 уровень)
        /  \   /  \    /  \
     (0,3) (1,2)  (2,1)  (3,0)
        \  /  \   /   \   /
        (1,3) (2,2)   (3,1)
           \   /  \    /
           (2,3)  (3,2)
              \     /
               (3,3)

  Искомое кол-во переходов будет равно кол-ву возможных веток дерева
  Количество потомков на каждом уровне дерева равно кол-ву узлов в прямоугольнике, если пропустить диагональ
  между (x, 0) и (0, x), где x - уровень дерева
  Кол-во вариантов переходов в каждую точку диагонали будет совпадать с треугольником Паскаля
                   1
                 1   1
               1  (2)  1
             1   3   3   1
           1   4  (6) 4   1
         1   5  10   10  5   1
       1   6  15  (15) 15  6   1
           ...

  Наша задача найти число(в скобочках), которое будет на ходиться на 2N строчке в середине
  Иначе - биномиальный коэффициент бинома Ньютона (1 + x)^n, где n = 2*N
  Что будет С из n по N
   N
  C
   2*N
 -}
c n 0 = 1
c 0 m = 0
c n m = c (n-1) (m-1) * n `div` m

countMovesV2 :: Int -> Int
countMovesV2 n = c (2*n) n

main = do
    --print $ traverse 20
    print $ countMovesV2 20
